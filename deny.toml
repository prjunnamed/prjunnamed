[licenses]
# The default list of licenses is empty, so we specify what we currently use
# while open to reasonable extensions to this list.
allow = [
    "0BSD",
    "MIT",
    "Apache-2.0",
]

[advisories]
unmaintained = "none"

[bans]
# q="?user_id=3618&per_page=100"; while [[ "$q" != null ]]; do curl -s "https://crates.io/api/v1/crates$q" > crates.json; jq '.crates.[].id' crates.json; q="$(jq -r .meta.next_page crates.json)"; done
deny = [
    "anyhow",
    "argv",
    "arraybuf",
    "asmdb",
    "async-trait",
    "automod",
    "basic-toml",
    "bazel",
    "buck",
    "bufsize",
    "build-alert",
    "cargo-docs-rs",
    "cargo-expand",
    "cargo-legacy-tui",
    "cargo-llvm-lines",
    "cargo-rm",
    "cargo-subcommand-metadata",
    "cargo-tally",
    "cargo-tui",
    "cargo-unlock",
    "cargo-untrusted",
    "cfg-every-src-file",
    "clang-ast",
    "clang-ast-test-suite",
    "codemod",
    "colorous",
    "columnation-master",
    "ctor-used-linker",
    "cxx",
    "cxx-build",
    "cxx-chrono",
    "cxx-codegen",
    "cxx-demo",
    "cxx-folly",
    "cxx-gen",
    "cxx-symbols",
    "cxx-test-suite",
    "cxxbridge",
    "cxxbridge-cmd",
    "cxxbridge-flags",
    "cxxbridge-macro",
    "db-dump",
    "db-dump-concat",
    "de",
    "demo-hack",
    "demo-hack-impl",
    "differential-dataflow-master",
    "dircnt",
    "dissimilar",
    "distributed-slice",
    "dragonbox",
    "dtoa",
    "dtolnay",
    "dyn-clone",
    "dyn-hash",
    "eager_json",
    "efg",
    "enumn",
    "erased-discriminant",
    "erased-serde",
    "faketty",
    "fast-rustup",
    "fastwrite",
    "get-all-crates",
    "gflags",
    "gflags-impl",
    "gh-token",
    "ghost",
    "hackfn",
    "however",
    "include_json",
    "indoc",
    "indoc-impl",
    "inherent",
    "inventory",
    "inventory-impl",
    "iota",
    "isatty",
    "item",
    "itoa",
    "lalrproc",
    "legacy-serde",
    "libfuzzer",
    "libfyaml",
    "libfyaml-sys",
    "linebreaks",
    "link-cplusplus",
    "linkme",
    "linkme-impl",
    "macro-string",
    "macro-string-eval",
    "mashup",
    "mashup-impl",
    "mini-internal",
    "miniserde",
    "miniserde-json",
    "mock",
    "monostate",
    "monostate-impl",
    "no-panic",
    "noexcept",
    "noexcept-impl",
    "noisy-clippy",
    "nopanic",
    "objekt",
    "oqueue",
    "paste",
    "paste-impl",
    "paste-test-suite",
    "post-expansion",
    "precise",
    "prettyplease",
    "print-cargo-encoded-rustflags",
    "print-cxx-include-dirs",
    "print-target-feature",
    "proc-macro-hack",
    "proc-macro-hack-impl",
    "proc-macro-nested",
    "proc-macro2",
    "proc-macro2-fallback",
    "proc-macro2-next",
    "proc-macro2-test",
    "quote",
    "quote-impl",
    "quote-next",
    "quoteln",
    "readonly",
    "reduce",
    "ref-cast",
    "ref-cast-impl",
    "ref-cast-test-suite",
    "reflect",
    "reflect-internal",
    "remain",
    "reparse",
    "respan",
    "rust-quiz",
    "rustflags",
    "rustq",
    "rustversion",
    "ryu",
    "safe-libyaml",
    "scratch",
    "select-rustc",
    "semver",
    "semver-normalization",
    "semver-trick",
    "seq-macro",
    "ser",
    "serde",
    "serde-bench",
    "serde-example",
    "serde-untagged",
    "serde06",
    "serde07",
    "serde08",
    "serde09",
    "serde1",
    "serde2",
    "serde_bincode",
    "serde_bytes",
    "serde_codegen_internals",
    "serde_derive",
    "serde_derive-x86_64-unknown-linux-gnu",
    "serde_derive_internals",
    "serde_growable_stack",
    "serde_ignored",
    "serde_item",
    "serde_json",
    "serde_json_experimental",
    "serde_libfyaml",
    "serde_libyaml",
    "serde_path_to_error",
    "serde_plugin",
    "serde_repr",
    "serde_stacker",
    "serde_starlark",
    "serde_test",
    "serde_traits",
    "serde_yaml",
    "serde_yaml_incomplete",
    "sha1dir",
    "squatternaut",
    "star-history",
    "syn",
    "syn-codegen",
    "syn-error-experiment",
    "syn-fold",
    "syn-next",
    "syn-select-next",
    "syn-test-suite",
    "syn-visit",
    "syn-visit-mut",
    "synom",
    "syntex_errors",
    "syntex_pos",
    "target-triple",
    "thiserror",
    "thiserror-impl",
    "threadbound",
    "timely-bytes-master",
    "timely-communication-master",
    "timely-container-master",
    "timely-logging-master",
    "timely-master",
    "tomlfmt",
    "trybuild",
    "trybuild-test-suite",
    "tt-call",
    "ttcc",
    "typeid",
    "typetag",
    "typetag-impl",
    "unicode-ident",
    "unindent",
    "unparse",
    "unsaef",
    "unsafe-libfyaml",
    "unsafe-libyaml",
    "unsafe-libyaml-test-suite",
    "untagged",
    "wa-serde-derive",
    "watt",
    "watt-abi",
    "watt-runtime",
    "xargo-check",
]
